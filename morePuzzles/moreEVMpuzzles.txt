PUZZLE 1
CALLDATASIZE -> 6
CALLVALUE -> 2
EXP -> CALLVALUE ** CALLDATASIZE = 40 (consumes stack) (6 ** 6)
JUMP -> [40] consumed

------------------
PC -> 41st HEX instruction
CALLDATASIZE -> 6
ADD -> CALLDATASIZE + 41 = 47 (in hex), CALLDATASIZE  + 65 = 71
JUMP
INVALID
INVALID
JUMPDEST
STOP

CALLDATASIZE: 0x000000000000 (byte size 6), CALLVALUE: 2
--------------------
PUZZLE 2
CALLDATASIZE -> 
PUSH1 00
PUSH1 00
CALLDATACOPY -> copys calldata into memory
CALLDATASIZE
PUSH1 00
PUSH1 00
CREATE -> uses calldata that was passed in from memory (returns address)
PUSH1 00
DUP1
DUP1
DUP1
DUP1
SWAP5 -> push address to top of stack send 00 back
GAS -> remaining gas left in transaction 
CALL -> consumes 7 args on stack executes code at address (if not reverted returns 1)
RETURNDATASIZE -> byte size of the return data from the last executed sub context
PUSH1 0A -> push 10
EQ -> if the create contract returned a byte size of 10
PUSH1 1F
JUMPI

push10 00000000000000000000 (10 bytes item on stack)
push1 0 (offset in memory to push to)
MSTORE
push1 10 (size of bytes to copy)
push1 0 (byte offset in memory to copy the return data of this context)
RETURN

600060005260106000F3